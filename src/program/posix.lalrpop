use program::posix::ast;

grammar;

pub Program: ast::Program = {
    // TODO #8: We need our own lexer to make this rule work.
    // <p: Program> "\n"+ <c: Commands> => {
    //     let (mut p, c) = (p, c);
    //     p.0.push(box c);
    //     p
    // },
    Complete => <>,
}

Complete: ast::Program = {
    <l: List> ";" => l,
    <l: List> "&" => {
        let bg = ast::Command::Background(box l);
        ast::Program(vec![box bg])
    },
    List => <>,
}

List: ast::Program = {
    <l: List> ";" <cs: Commands> => {
        let (mut l, j) = (l, cs.clone());
        l.0.push(box cs);
        l
    },
    <l: List> "&" <cs: Commands> => {
        let bg = ast::Command::Background(box l);
        ast::Program(vec![box bg, box cs])
    },
    Commands => ast::Program(vec![box <>]),
}

Compound: ast::Program = {
    <c: Compound> ";" <cs: Commands> => {
        let (mut c, j) = (c, cs.clone());
        c.0.push(box cs);
        c
    },
    // TODO #10: Why doesn't this work?
    // <cs: Commands> ";" => ast::Program(vec![box cs]),
    Commands => ast::Program(vec![box <>]),
}

Commands: ast::Command = {
    // TODO: Hopefully in fixing #8 and #10 this can play nicely.
    //"{@" <i: r"#![^}^;]*"> <t: r";[^}]*"> "}" => {
    //    let b = ast::BridgedProgram(Interpreter::Other(i.into()), t.into());
    //    ast::Command::Bridgeshell(box b)
    //},
    "(" <p: Program> ")" => {
        ast::Command::Subshell(box p)
    },
    "{" <c: Compound> "}" => {
        ast::Command::Compound(box c)
    },
    <cs: Commands> "&&" <p: Pipeline> => {
        ast::Command::And(box cs, box p)
    },
    <cs: Commands> "||" <p: Pipeline> => {
        ast::Command::Or(box cs, box p)
    },
    Pipeline => <>,
}

Pipeline: ast::Command = {
    "!" <ps: PipelineSeq> => ast::Command::Not(box ps),
    <ps: PipelineSeq> => ps,
}

PipelineSeq: ast::Command = {
    <ps: PipelineSeq> "|" "\n"* <c: Command> => {
        ast::Command::Pipeline(box ps, box c)
    },
    <c: Command> => c,
}

Command: ast::Command = Word+ => ast::Command::Simple(<>);

// TODO #8: Custom lexer plus proger rules needed.
Word: ast::Word = r"[a-zA-Z0-9-_\.]+" => ast::Word(<>.into());
