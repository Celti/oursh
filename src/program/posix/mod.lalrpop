use program::posix::ast;
use program::posix::lex;
use program::ast::Interpreter;

grammar<'input>(text: &'input str);

extern {
    type Location = usize;
    type Error = lex::Error;

    enum lex::Token<'input> {
        " "    => lex::Token::Space,
        "\t"   => lex::Token::Tab,
        "\n"   => lex::Token::Linefeed,
        ";"    => lex::Token::Semi,
        "&"    => lex::Token::Amper,
        "{"    => lex::Token::LBrace,
        "}"    => lex::Token::RBrace,
        "("    => lex::Token::LParen,
        ")"    => lex::Token::RParen,
        "`"    => lex::Token::Backtick,
        "!"    => lex::Token::Bang,
        "|"    => lex::Token::Pipe,
        "$"    => lex::Token::Dollar,
        "="    => lex::Token::Equals,
        "\\"   => lex::Token::Backslash,
        "\""   => lex::Token::DoubleQuote,
        "'"    => lex::Token::SingleQuote,
        ">"    => lex::Token::RCaret,
        "<"    => lex::Token::LCaret,
        "&&"   => lex::Token::And,
        "||"   => lex::Token::Or,
        "WORD" => lex::Token::Word(<&'input str>),
        "{#!"   => lex::Token::Shebang,
    }
}

pub Program: ast::Program = {
    <p: Program> "\n" <c: Complete> => {
        p.append(&c)
    },
    <p: Program> "\n" => p,
    Complete => <>,
}

Complete: ast::Program = {
    <l: List> ";" => l,
    <l: List> "&" => {
        let bg = ast::Command::Background(box l);
        ast::Program(vec![box bg])
    },
    List => <>,
}

List: ast::Program = {
    <l: List> ";" <cs: Commands> => {
        l.push(&cs)
    },
    <l: List> "&" <cs: Commands> => {
        let bg = ast::Command::Background(box l);
        ast::Program(vec![box bg, box cs])
    },
    Commands => {
        ast::Program(vec![box <>])
    },
}

Compound: ast::Program = {
    <cs: Commands> ";" <c: Compound> => {
        c.insert(&cs)
    },
    <cs: Commands> ";" => {
        ast::Program(vec![box cs])
    },
}

Commands: ast::Command = {
    // TODO #15: Hopefully in fixing #8 and #10 this can play nicely.
    // NOTE: This can be successfully complied, but will break a doc tests.
    "{#!" <i: "WORD"+> ";" <t: "WORD"*> "}" => {
        let i = i.join(" ");
        let t = t.join(" ");
        let b = ast::BridgedProgram(Interpreter::Other(i), t);
        ast::Command::Bridgeshell(box b)
    },
    "(" <p: Program> ")" => {
        ast::Command::Subshell(box p)
    },
    "{" <c: Compound> "}" => {
        ast::Command::Compound(box c)
    },
    <cs: Commands> "&&" <p: Pipeline> => {
        ast::Command::And(box cs, box p)
    },
    <cs: Commands> "||" <p: Pipeline> => {
        ast::Command::Or(box cs, box p)
    },
    Pipeline => <>,
}

Pipeline: ast::Command = {
    "!" <ps: PipelineSeq> => {
        ast::Command::Not(box ps)
    },
    <ps: PipelineSeq> => ps,
}

PipelineSeq: ast::Command = {
    <ps: PipelineSeq> "|" "\n"* <c: Command> => {
        ast::Command::Pipeline(box ps, box c)
    },
    <c: Command> => c,
}

Command: ast::Command = {
    "WORD"+ => ast::Command::Simple(<>.iter().map(|w| {
        ast::Word(w.to_string())
    }).collect())
}
