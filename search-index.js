var N=null,E="",T="t",U="u",searchIndex={};
var r_0a="Lexer",r_1a="CommandParser",r_2a="ProgramParser",r_3a="__ToTriple",r_4a="Completion",r_5a="History",r_6a="Prompt",r_Aa="typeid",r_Ba="try_into",r_Ca="borrow_mut",r_Da="from",r_Ea="oursh::program::basic",r_Fa="into",r_Ga="oursh::program::posix::builtin",r_Ha="oursh::program::posix::ast",r_Ia="to_owned",r_Ja="clone_into",r_Ka="oursh::program::posix::lex",r_La="oursh::program::posix::parse",r_Ma="oursh::repl::completion",r_Na="oursh::repl::history",r_Oa="commands",r_Pa="run",r_Qa="vec",r_Ra="token",r_Sa="bool",r_Ta="clone",r_Ua="formatter",r_Va="fmt",r_Wa="Builtin",r_Xa="Word",r_Ya="Interpreter",r_Za="Token",r_aa="oursh",r_ba="self",r_ca="result",r_da="oursh::program",r_ea="cstring",r_fa="waitstatus",r_ga="oursh::program::posix",r_ha="Program",r_ia="Command",r_ja="Perform the first command, conditionally running the next…",r_ka="command",r_la="Error",r_ma="Shebang",r_na="parse",r_oa="__tokens",r_pa="program",r_qa="parseerror",r_ra="completion",r_sa="str",r_ta="string",r_ua="oursh::repl",r_va="option",r_wa="oursh::job",r_xa="try_from",r_ya="borrow",r_za="get_type_id";

searchIndex[r_aa]={"doc":"Documentation Build Status Dependencies Gitter Chat","i":[[0,"job",r_aa,"Subprocess execution management.",N,N],[3,"Job",r_wa,"A job to be executed by various means.",N,N],[11,"new",E,"Create a new job from the given command.",0,[[[r_Qa,[r_ea]]],[r_ba]]],[11,r_Pa,E,"Run a shell job, waiting for the command to finish.",0,[[[r_ba]],[r_ca,[r_fa]]]],[11,"run_background",E,"Run a shell job in the background.",0,[[[r_ba]],[r_ca]]],[0,r_pa,r_aa,"Parsing and handling program syntax(es) of the shell.",N,N],[4,r_la,r_da,"A comprehensive error type for the operation of programs.",N,N],[13,"Read",E,"A general issue reading the program.",1,N],[13,"Parse",E,"An error within the lexer or parser.",1,N],[13,"Runtime",E,"An error encountered during the evaluation of a program.",1,N],[5,"parse_primary",E,"Parse a program of the primary type.",N,[[["r"]],[r_ca,["primaryprogram"]]]],[5,"parse_alternate",E,"Parse a program of the alternate type.",N,[[["r"]],[r_ca,["alternateprogram"]]]],[5,r_na,E,"Parse a program of the given type.",N,[[["r"]],[r_ca]]],[0,"basic",E,"Single command programs with no features.",N,N],[3,r_ha,r_Ea,"A basic program with only a single command.",N,N],[3,r_ia,E,"A single poorly parsed command.",N,N],[0,"posix",r_da,"The shell language (often called `sh`) at the heart of the…",N,N],[0,"builtin",r_ga,"Commands that are run from the shell directly, without…",N,N],[3,"Exit",r_Ga,"Exit builtin, alternative to ctrl-d.",N,N],[3,"Cd",E,"Change directory (`cd`) builtin.",N,N],[3,"Null",E,"Noop builtin, same idea as `true`.",N,N],[8,r_Wa,E,"A builtin is a custom shell command, often changing the…",N,N],[10,r_Pa,E,"Execute the shell builtin command, returning a retult of…",2,[[[r_Qa,[r_ea]]],[r_ca,[r_fa]]]],[0,"ast",r_ga,"Abstract Syntax Tree for the POSIX language.",N,N],[3,r_ha,r_Ha,"A program is the result of parsing a sequence of commands.",N,N],[12,"0",E,E,3,N],[3,r_Xa,E,"A parsed word, already having gone through expansion.",N,N],[12,"0",E,E,4,N],[4,r_ia,E,"A command is a highly mutually-recursive node with the…",N,N],[13,"Simple",E,"Just a single command, with it's arguments.",5,N],[13,"Compound",E,"A full program embedded in a compound command.",5,N],[13,"Not",E,"Performs boolean negation to the status code of the inner…",5,N],[13,"And",E,r_ja,5,N],[13,"Or",E,r_ja,5,N],[13,"Subshell",E,"Run the inner program in a sub-shell environment.",5,N],[13,"Pipeline",E,"Run a command's output through to the input of another.",5,N],[13,"Background",E,"Run a command in the background.",5,N],[13,r_ma,E,"Run a program through another parser/interpreter.",5,N],[4,r_Ya,E,"Either explicit or implicit declaration of the…",N,N],[13,"Primary",E,E,6,N],[13,"Alternate",E,E,6,N],[13,"Other",E,E,6,N],[11,"push",E,E,5,[[[r_ba],[r_ka]],[r_ba]]],[11,"insert",E,E,5,[[[r_ba],[r_ka]],[r_ba]]],[0,"lex",r_ga,"Custom LALRPOP lexer for tokenizing the input stream.",N,N],[3,r_0a,r_Ka,"A lexer to feed the parser gernerated by LALRPOP.",N,N],[4,r_la,E,"A lexer error.",N,N],[13,"UnrecognizedChar",E,E,7,N],[4,r_Za,E,"Every token in the langauge, these are the terminals of…",N,N],[13,"Space",E,E,8,N],[13,"Tab",E,E,8,N],[13,"Linefeed",E,E,8,N],[13,"Semi",E,E,8,N],[13,"Amper",E,E,8,N],[13,"RBrace",E,E,8,N],[13,"LBrace",E,E,8,N],[13,"RParen",E,E,8,N],[13,"LParen",E,E,8,N],[13,"Backtick",E,E,8,N],[13,"Bang",E,E,8,N],[13,"Pipe",E,E,8,N],[13,"Dollar",E,E,8,N],[13,"Equals",E,E,8,N],[13,"Backslash",E,E,8,N],[13,"DoubleQuote",E,E,8,N],[13,"SingleQuote",E,E,8,N],[13,"RCaret",E,E,8,N],[13,"LCaret",E,E,8,N],[13,"And",E,E,8,N],[13,"Or",E,E,8,N],[13,"If",E,E,8,N],[13,"Then",E,E,8,N],[13,"Else",E,E,8,N],[13,"Elif",E,E,8,N],[13,"Fi",E,E,8,N],[13,"Do",E,E,8,N],[13,"Done",E,E,8,N],[13,"Case",E,E,8,N],[13,"Esac",E,E,8,N],[13,"While",E,E,8,N],[13,"Until",E,E,8,N],[13,"For",E,E,8,N],[13,r_Xa,E,E,8,N],[13,r_ma,E,E,8,N],[13,"Text",E,E,8,N],[6,"Span",E,"A result type wrapping a token with start and end locations.",N,N],[11,"new",E,"Create a new lexer from an input &str.",9,[[[r_sa]],[r_ba]]],[0,r_na,r_ga,"LALRPOP generated parser module.",N,N],[3,r_1a,r_La,E,N,N],[3,r_2a,E,E,N,N],[11,"new",E,E,10,[[],["commandparser"]]],[11,r_na,E,E,10,[[[r_ba],[r_sa],[r_oa]],[r_ca,[r_ka,r_qa]]]],[11,"new",E,E,11,[[],["programparser"]]],[11,r_na,E,E,11,[[[r_ba],[r_sa],[r_oa]],[r_ca,[r_pa,r_qa]]]],[8,r_3a,E,E,N,N],[16,r_la,E,E,12,N],[10,"to_triple",E,E,12,[[[r_ba]],[r_ca]]],[6,"Result",r_da,"Convenience type for results with program errors.",N,N],[6,"PrimaryProgram",E,"The primary program type, used for unannotated blocks.",N,N],[6,"AlternateProgram",E,"TODO: alt explain",N,N],[8,r_ha,E,"A program is as large as a file or as small as a line.",N,N],[16,r_ia,E,"The type of each of this program's commands.",13,N],[10,r_na,E,"Parse a whole program from the given `reader`.",13,[[["r"]],[r_ca]]],[10,r_Oa,E,"Return a list of all the commands in this program.",13,N],[11,r_Pa,E,"Run the program sequentially.",13,[[[r_ba]],[r_ca,[r_fa]]]],[8,r_ia,E,"A command is a task given by the user as part of a…",N,N],[10,r_Pa,E,"Run the command, returning a result of it's work.",14,[[[r_ba]],[r_ca,[r_fa]]]],[11,"name",E,"Return the name of this command.",14,[[[r_ba]],[r_ea]]],[0,"repl",r_aa,"Quick and effective raw mode repl library for ANSI…",N,N],[3,r_6a,r_ua,"A status prompt to be displayed in interactive sessions…",N,N],[5,"start",E,"Start a REPL over the strings the user provides.",N,[[["stdin"],["stdout"],["f"]]]],[0,r_ra,E,"User text completion for REPL interations.",N,N],[4,r_4a,r_Ma,"The result of a query for text completion.",N,N],[13,"None",E,"Nothing completes the user text.",15,N],[13,"Partial",E,"The user text could match multiple complete values.",15,N],[13,"Complete",E,"A single complete value.",15,N],[5,"complete",E,"Return a completed (valid) program text from the partial…",N,[[[r_sa]],[r_ra]]],[5,"executable_completions",E,"Return a list of the matches from the given partial…",N,[[[r_sa]],[r_ra]]],[5,"path_complete",E,"Complete a path at the end of the given string.",N,[[[r_sa]],[r_ra]]],[11,"is_complete",E,"Returns true if this completion is a single option.",15,[[[r_ba]],[r_Sa]]],[11,"first",E,"Return the first (lexicographically) option if there are…",15,[[[r_ba]],[r_ta]]],[11,"possibilities",E,"Return a list of all the possibile complete matches.",15,[[[r_ba]],[r_Qa,[r_ta]]]],[0,"history",r_ua,"Keeps a record of previous commands, used for completion…",N,N],[3,r_5a,r_Na,"The history of a user's provided commands.",N,N],[11,"reset_index",E,E,16,[[[r_ba]]]],[11,"add",E,E,16,[[[r_ba],[r_sa],["usize"]]]],[11,"get_up",E,E,16,[[[r_ba]],[r_va,[r_ta]]]],[11,"get_down",E,E,16,[[[r_ba]],[r_va,[r_ta]]]],[11,"load",E,E,16,[[],[r_ba]]],[11,"save",E,E,16,[[[r_ba]]]],[18,"DEFAULT_FORMAT",r_ua,"The most basic possible prompt.",17,N],[11,"new",E,E,17,[[],[r_ba]]],[11,"sh_style",E,E,17,[[[r_ba]],[r_ba]]],[11,"nixpulvis_style",E,E,17,[[[r_ba]],[r_ba]]],[11,"long_style",E,E,17,[[[r_ba]],[r_ba]]],[11,"short_style",E,E,17,[[[r_ba]],[r_ba]]],[11,"display",E,E,17,N],[14,"debug",r_aa,"Print debug information to stderr.",N,N],[11,r_Da,r_wa,E,0,[[[T]],[T]]],[11,r_Fa,E,E,0,[[[r_ba]],[U]]],[11,r_xa,E,E,0,[[[U]],[r_ca]]],[11,r_ya,E,E,0,[[[r_ba]],[T]]],[11,r_za,E,E,0,[[[r_ba]],[r_Aa]]],[11,r_Ba,E,E,0,[[[r_ba]],[r_ca]]],[11,r_Ca,E,E,0,[[[r_ba]],[T]]],[11,r_Da,r_da,E,1,[[[T]],[T]]],[11,r_Fa,E,E,1,[[[r_ba]],[U]]],[11,r_xa,E,E,1,[[[U]],[r_ca]]],[11,r_ya,E,E,1,[[[r_ba]],[T]]],[11,r_za,E,E,1,[[[r_ba]],[r_Aa]]],[11,r_Ba,E,E,1,[[[r_ba]],[r_ca]]],[11,r_Ca,E,E,1,[[[r_ba]],[T]]],[11,r_Da,r_Ea,E,18,[[[T]],[T]]],[11,r_Fa,E,E,18,[[[r_ba]],[U]]],[11,r_xa,E,E,18,[[[U]],[r_ca]]],[11,r_ya,E,E,18,[[[r_ba]],[T]]],[11,r_za,E,E,18,[[[r_ba]],[r_Aa]]],[11,r_Ba,E,E,18,[[[r_ba]],[r_ca]]],[11,r_Ca,E,E,18,[[[r_ba]],[T]]],[11,r_Da,E,E,19,[[[T]],[T]]],[11,r_Fa,E,E,19,[[[r_ba]],[U]]],[11,r_xa,E,E,19,[[[U]],[r_ca]]],[11,r_ya,E,E,19,[[[r_ba]],[T]]],[11,r_za,E,E,19,[[[r_ba]],[r_Aa]]],[11,r_Ba,E,E,19,[[[r_ba]],[r_ca]]],[11,r_Ca,E,E,19,[[[r_ba]],[T]]],[11,r_Da,r_Ga,E,20,[[[T]],[T]]],[11,r_Fa,E,E,20,[[[r_ba]],[U]]],[11,r_xa,E,E,20,[[[U]],[r_ca]]],[11,r_ya,E,E,20,[[[r_ba]],[T]]],[11,r_za,E,E,20,[[[r_ba]],[r_Aa]]],[11,r_Ba,E,E,20,[[[r_ba]],[r_ca]]],[11,r_Ca,E,E,20,[[[r_ba]],[T]]],[11,r_Da,E,E,21,[[[T]],[T]]],[11,r_Fa,E,E,21,[[[r_ba]],[U]]],[11,r_xa,E,E,21,[[[U]],[r_ca]]],[11,r_ya,E,E,21,[[[r_ba]],[T]]],[11,r_za,E,E,21,[[[r_ba]],[r_Aa]]],[11,r_Ba,E,E,21,[[[r_ba]],[r_ca]]],[11,r_Ca,E,E,21,[[[r_ba]],[T]]],[11,r_Da,E,E,22,[[[T]],[T]]],[11,r_Fa,E,E,22,[[[r_ba]],[U]]],[11,r_xa,E,E,22,[[[U]],[r_ca]]],[11,r_ya,E,E,22,[[[r_ba]],[T]]],[11,r_za,E,E,22,[[[r_ba]],[r_Aa]]],[11,r_Ba,E,E,22,[[[r_ba]],[r_ca]]],[11,r_Ca,E,E,22,[[[r_ba]],[T]]],[11,r_Da,r_Ha,E,3,[[[T]],[T]]],[11,r_Fa,E,E,3,[[[r_ba]],[U]]],[11,r_Ia,E,E,3,[[[r_ba]],[T]]],[11,r_Ja,E,E,3,N],[11,r_xa,E,E,3,[[[U]],[r_ca]]],[11,r_ya,E,E,3,[[[r_ba]],[T]]],[11,r_za,E,E,3,[[[r_ba]],[r_Aa]]],[11,r_Ba,E,E,3,[[[r_ba]],[r_ca]]],[11,r_Ca,E,E,3,[[[r_ba]],[T]]],[11,r_Da,E,E,4,[[[T]],[T]]],[11,r_Fa,E,E,4,[[[r_ba]],[U]]],[11,r_Ia,E,E,4,[[[r_ba]],[T]]],[11,r_Ja,E,E,4,N],[11,r_xa,E,E,4,[[[U]],[r_ca]]],[11,r_ya,E,E,4,[[[r_ba]],[T]]],[11,r_za,E,E,4,[[[r_ba]],[r_Aa]]],[11,r_Ba,E,E,4,[[[r_ba]],[r_ca]]],[11,r_Ca,E,E,4,[[[r_ba]],[T]]],[11,r_Da,E,E,5,[[[T]],[T]]],[11,r_Fa,E,E,5,[[[r_ba]],[U]]],[11,r_Ia,E,E,5,[[[r_ba]],[T]]],[11,r_Ja,E,E,5,N],[11,r_xa,E,E,5,[[[U]],[r_ca]]],[11,r_ya,E,E,5,[[[r_ba]],[T]]],[11,r_za,E,E,5,[[[r_ba]],[r_Aa]]],[11,r_Ba,E,E,5,[[[r_ba]],[r_ca]]],[11,r_Ca,E,E,5,[[[r_ba]],[T]]],[11,r_Da,E,E,6,[[[T]],[T]]],[11,r_Fa,E,E,6,[[[r_ba]],[U]]],[11,r_Ia,E,E,6,[[[r_ba]],[T]]],[11,r_Ja,E,E,6,N],[11,r_xa,E,E,6,[[[U]],[r_ca]]],[11,r_ya,E,E,6,[[[r_ba]],[T]]],[11,r_za,E,E,6,[[[r_ba]],[r_Aa]]],[11,r_Ba,E,E,6,[[[r_ba]],[r_ca]]],[11,r_Ca,E,E,6,[[[r_ba]],[T]]],[11,r_Da,r_Ka,E,9,[[[T]],[T]]],[11,"into_iter",E,E,9,[[[r_ba]],["i"]]],[11,r_Fa,E,E,9,[[[r_ba]],[U]]],[11,r_xa,E,E,9,[[[U]],[r_ca]]],[11,r_ya,E,E,9,[[[r_ba]],[T]]],[11,r_za,E,E,9,[[[r_ba]],[r_Aa]]],[11,r_Ba,E,E,9,[[[r_ba]],[r_ca]]],[11,r_Ca,E,E,9,[[[r_ba]],[T]]],[11,r_Da,E,E,7,[[[T]],[T]]],[11,r_Fa,E,E,7,[[[r_ba]],[U]]],[11,r_xa,E,E,7,[[[U]],[r_ca]]],[11,r_ya,E,E,7,[[[r_ba]],[T]]],[11,r_za,E,E,7,[[[r_ba]],[r_Aa]]],[11,r_Ba,E,E,7,[[[r_ba]],[r_ca]]],[11,r_Ca,E,E,7,[[[r_ba]],[T]]],[11,r_Da,E,E,8,[[[T]],[T]]],[11,r_Fa,E,E,8,[[[r_ba]],[U]]],[11,r_xa,E,E,8,[[[U]],[r_ca]]],[11,r_ya,E,E,8,[[[r_ba]],[T]]],[11,r_za,E,E,8,[[[r_ba]],[r_Aa]]],[11,r_Ba,E,E,8,[[[r_ba]],[r_ca]]],[11,r_Ca,E,E,8,[[[r_ba]],[T]]],[11,r_Da,r_La,E,10,[[[T]],[T]]],[11,r_Fa,E,E,10,[[[r_ba]],[U]]],[11,r_xa,E,E,10,[[[U]],[r_ca]]],[11,r_ya,E,E,10,[[[r_ba]],[T]]],[11,r_za,E,E,10,[[[r_ba]],[r_Aa]]],[11,r_Ba,E,E,10,[[[r_ba]],[r_ca]]],[11,r_Ca,E,E,10,[[[r_ba]],[T]]],[11,r_Da,E,E,11,[[[T]],[T]]],[11,r_Fa,E,E,11,[[[r_ba]],[U]]],[11,r_xa,E,E,11,[[[U]],[r_ca]]],[11,r_ya,E,E,11,[[[r_ba]],[T]]],[11,r_za,E,E,11,[[[r_ba]],[r_Aa]]],[11,r_Ba,E,E,11,[[[r_ba]],[r_ca]]],[11,r_Ca,E,E,11,[[[r_ba]],[T]]],[11,r_Da,r_ua,E,17,[[[T]],[T]]],[11,r_Fa,E,E,17,[[[r_ba]],[U]]],[11,r_xa,E,E,17,[[[U]],[r_ca]]],[11,r_ya,E,E,17,[[[r_ba]],[T]]],[11,r_za,E,E,17,[[[r_ba]],[r_Aa]]],[11,r_Ba,E,E,17,[[[r_ba]],[r_ca]]],[11,r_Ca,E,E,17,[[[r_ba]],[T]]],[11,r_Da,r_Ma,E,15,[[[T]],[T]]],[11,r_Fa,E,E,15,[[[r_ba]],[U]]],[11,r_xa,E,E,15,[[[U]],[r_ca]]],[11,r_ya,E,E,15,[[[r_ba]],[T]]],[11,r_za,E,E,15,[[[r_ba]],[r_Aa]]],[11,r_Ba,E,E,15,[[[r_ba]],[r_ca]]],[11,r_Ca,E,E,15,[[[r_ba]],[T]]],[11,r_Da,r_Na,E,16,[[[T]],[T]]],[11,r_Fa,E,E,16,[[[r_ba]],[U]]],[11,r_xa,E,E,16,[[[U]],[r_ca]]],[11,r_ya,E,E,16,[[[r_ba]],[T]]],[11,r_za,E,E,16,[[[r_ba]],[r_Aa]]],[11,r_Ba,E,E,16,[[[r_ba]],[r_ca]]],[11,r_Ca,E,E,16,[[[r_ba]],[T]]],[11,r_na,r_Ea,"Create a new program from the given reader.",18,[[["r"]],[r_ca]]],[11,r_Oa,E,"Return the single parsed command.",18,N],[11,r_na,r_Ha,E,3,[[["r"]],[r_ca]]],[11,r_Oa,E,E,3,N],[11,r_Pa,r_Ea,"Treat each space blindly as an argument delimiter.",19,[[[r_ba]],[r_ca,[r_fa]]]],[11,r_Pa,r_Ha,E,5,[[[r_ba]],[r_ca,[r_fa]]]],[11,r_Pa,r_Ga,E,20,[[[r_Qa,[r_ea]]],[r_ca,[r_fa]]]],[11,r_Pa,E,E,21,[[[r_Qa,[r_ea]]],[r_ca,[r_fa]]]],[11,r_Pa,E,E,22,[[[r_Qa,[r_ea]]],[r_ca,[r_fa]]]],[11,"next",r_Ka,E,9,[[[r_ba]],[r_va]]],[11,"eq",E,E,8,[[[r_ba],[r_Ra]],[r_Sa]]],[11,"ne",E,E,8,[[[r_ba],[r_Ra]],[r_Sa]]],[11,r_Ta,r_Ha,E,3,[[[r_ba]],[r_pa]]],[11,r_Ta,E,E,5,[[[r_ba]],[r_ka]]],[11,r_Ta,E,E,4,[[[r_ba]],["word"]]],[11,r_Ta,E,E,6,[[[r_ba]],["interpreter"]]],[11,r_Va,r_da,E,1,[[[r_ba],[r_Ua]],[r_ca]]],[11,r_Va,r_Ea,E,18,[[[r_ba],[r_Ua]],[r_ca]]],[11,r_Va,E,E,19,[[[r_ba],[r_Ua]],[r_ca]]],[11,r_Va,r_Ha,E,3,[[[r_ba],[r_Ua]],[r_ca]]],[11,r_Va,E,E,5,[[[r_ba],[r_Ua]],[r_ca]]],[11,r_Va,E,E,4,[[[r_ba],[r_Ua]],[r_ca]]],[11,r_Va,E,E,6,[[[r_ba],[r_Ua]],[r_ca]]],[11,r_Va,r_Ka,E,7,[[[r_ba],[r_Ua]],[r_ca]]],[11,r_Va,E,E,8,[[[r_ba],[r_Ua]],[r_ca]]],[11,r_Va,r_Ma,E,15,[[[r_ba],[r_Ua]],[r_ca]]],[11,r_Va,r_Na,E,16,[[[r_ba],[r_Ua]],[r_ca]]]],"p":[[3,"Job"],[4,r_la],[8,r_Wa],[3,r_ha],[3,r_Xa],[4,r_ia],[4,r_Ya],[4,r_la],[4,r_Za],[3,r_0a],[3,r_1a],[3,r_2a],[8,r_3a],[8,r_ha],[8,r_ia],[4,r_4a],[3,r_5a],[3,r_6a],[3,r_ha],[3,r_ia],[3,"Exit"],[3,"Cd"],[3,"Null"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);